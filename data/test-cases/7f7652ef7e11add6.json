{
  "uid" : "7f7652ef7e11add6",
  "name" : "Ввод различных данных в поле логина и проверка валидации",
  "fullName" : "tests.test_im_reg_auth.TestImAuthReg#test_auth_valid_login_field",
  "historyId" : "22e42af2235cd2d6a6e31ce664949c47",
  "time" : {
    "start" : 1738267255239,
    "stop" : 1738267269330,
    "duration" : 14091
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <tests.test_im_reg_auth.TestImAuthReg object at 0x7f7cb1a59490>\nemail = ',./*\"(*?).', expected_error = 'Введите свой телефон или e-mail'\n\n    @allure.story('2.Авторизация. Валидация поля Телефон/E-mail')\n    @allure.title('Ввод различных данных в поле логина и проверка валидации')\n    @pytest.mark.parametrize(\"email, expected_error\", [\n            ('tests@example.com',''),\n            ('79022779866',''),\n            ('798888', 'Некорректный номер телефона'),\n            (',./*\"(*?).', 'Введите свой телефон или e-mail'),\n            ('privet@g', 'Некорректный E-mail')\n        ])\n    def test_auth_valid_login_field(self, email, expected_error):\n>       self.auth_page.open_auth_page()\n\ntests/test_im_reg_auth.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/authpage.py:52: in open_auth_page\n    button_submit = self.wait_for_clickable_element('//button[text()=\"Применить\"]')\npages/authpage.py:28: in wait_for_clickable_element\n    return WebDriverWait(self.browser, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9b5d931c417b1e8624e09afb4945eaad\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f7cb1ae63e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1738267254923,
      "stop" : 1738267255238,
      "duration" : 315
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "set_allure_labels",
    "time" : {
      "start" : 1738267255238,
      "stop" : 1738267255238,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1738267255238,
      "stop" : 1738267255239,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <tests.test_im_reg_auth.TestImAuthReg object at 0x7f7cb1a59490>\nemail = ',./*\"(*?).', expected_error = 'Введите свой телефон или e-mail'\n\n    @allure.story('2.Авторизация. Валидация поля Телефон/E-mail')\n    @allure.title('Ввод различных данных в поле логина и проверка валидации')\n    @pytest.mark.parametrize(\"email, expected_error\", [\n            ('tests@example.com',''),\n            ('79022779866',''),\n            ('798888', 'Некорректный номер телефона'),\n            (',./*\"(*?).', 'Введите свой телефон или e-mail'),\n            ('privet@g', 'Некорректный E-mail')\n        ])\n    def test_auth_valid_login_field(self, email, expected_error):\n>       self.auth_page.open_auth_page()\n\ntests/test_im_reg_auth.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/authpage.py:52: in open_auth_page\n    button_submit = self.wait_for_clickable_element('//button[text()=\"Применить\"]')\npages/authpage.py:28: in wait_for_clickable_element\n    return WebDriverWait(self.browser, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9b5d931c417b1e8624e09afb4945eaad\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f7cb1ae63e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
    "steps" : [ {
      "name" : "Открыть страницу авторизации",
      "time" : {
        "start" : 1738267255239,
        "stop" : 1738267269330,
        "duration" : 14091
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/workspace/pages/authpage.py\", line 52, in open_auth_page\n    button_submit = self.wait_for_clickable_element('//button[text()=\"Применить\"]')\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/authpage.py\", line 28, in wait_for_clickable_element\n    return WebDriverWait(self.browser, timeout).until(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "721f9f60a653790c",
        "name" : "Ошибка ожидания кликабельного элемента: //button[text()=\"Применить\"]",
        "source" : "721f9f60a653790c.txt",
        "type" : "text/plain",
        "size" : 10
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1738267269343,
      "stop" : 1738267269398,
      "duration" : 55
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "ИМ - Регистрация/авторизация"
  }, {
    "name" : "suite",
    "value" : "ИМ - Регистрация/авторизация"
  }, {
    "name" : "feature",
    "value" : "ИМ - Регистрация/авторизация"
  }, {
    "name" : "story",
    "value" : "2.Авторизация. Валидация поля Телефон/E-mail"
  }, {
    "name" : "subSuite",
    "value" : "TestImAuthReg"
  }, {
    "name" : "host",
    "value" : "0ad1073d6a14"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_im_reg_auth"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "email",
    "value" : "',./*\"(*?).'"
  }, {
    "name" : "expected_error",
    "value" : "'Введите свой телефон или e-mail'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7f7652ef7e11add6.json",
  "parameterValues" : [ "',./*\"(*?).'", "'Введите свой телефон или e-mail'" ]
}